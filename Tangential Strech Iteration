#%%%% Tangential Stretch Iteration

from local_flame_speed import read_piv_data, normalized
from scipy.spatial import distance
from scipy.interpolate import griddata
import numpy as np

def calculate_segment_gradients(image_nr, n_nearest_coords, threshold_angle):

    contour_nr, n_windows_x, n_windows_y, x, y, u, v, velocity_abs = read_piv_data(image_nr)
    x_mm, y_mm, u_norm, v_norm, velocity_abs_norm = normalized(x, y, u, v, D, U_bulk)

    grid_x, grid_y = np.mgrid[np.min(x_mm):np.max(x_mm):1, np.min(y_mm):np.max(y_mm):1]

    points = np.vstack((x_mm.ravel(), y_mm.ravel())).T
    values_u = u_norm.ravel()
    values_v = v_norm.ravel()

    u_interp = griddata(points, values_u, (grid_x, grid_y), method='cubic')
    v_interp = griddata(points, values_v, (grid_x, grid_y), method='cubic')

    grid_points = np.array(list(zip(grid_x.ravel(), grid_y.ravel())))

    def get_closest_point_on_line(point, grid_points):
        origin = np.array([6, -9.5])
        endpoint = np.array(point)
        line_vector = endpoint - origin
        distances = []
        for grid_point in grid_points:
            grid_vector = grid_point - origin
            projection = np.dot(grid_vector, line_vector) / np.linalg.norm(line_vector)
            if 0 <= projection <= np.linalg.norm(line_vector):
                dist = distance.euclidean(endpoint, grid_point)
                distances.append((dist, grid_point))
        if distances:
            distances.sort(key=lambda x: x[0])
            return distances[0][1]
        return None

    def calculate_velocity_components(closest_point, u_interp, v_interp, segment_start, segment_end):
        u = u_interp
        v = v_interp

        segment_vector = np.array(segment_end) - np.array(segment_start)  
        segment_length = np.linalg.norm(segment_vector)
        tangent_vector = segment_vector / segment_length

        normal_vector = np.array([-tangent_vector[1], tangent_vector[0]])

        velocity_vector = np.array([u_interp, v_interp])

        tangential_component = np.dot(velocity_vector, tangent_vector)

        return tangential_component

    segment_gradients = []
    segment_numbers = []
    tangential_components = []
    cell_positions = []

    for i in range(len(final_segments)):
        x_start = final_segments[i][0][0]
        y_start = final_segments[i][0][1]
        x_end = final_segments[i][0][2]
        y_end = final_segments[i][0][3]

        closest_point_start = get_closest_point_on_line((x_start, y_start), grid_points)
        closest_point_end = get_closest_point_on_line((x_end, y_end), grid_points)

        if closest_point_start is not None and closest_point_end is not None:

            u_start_interp = griddata(points, values_u, (closest_point_start[0], closest_point_start[1]), method='cubic')
            v_start_interp = griddata(points, values_v, (closest_point_start[0], closest_point_start[1]), method='cubic')
            u_end_interp = griddata(points, values_u, (closest_point_end[0], closest_point_end[1]), method='cubic')
            v_end_interp = griddata(points, values_v, (closest_point_end[0], closest_point_end[1]), method='cubic')

            u_start = u_start_interp.item()
            v_start = v_start_interp.item()
            u_end = u_end_interp.item()
            v_end = v_end_interp.item()

            segment_start = [x_start, y_start]
            segment_end = [x_end, y_end]

            tangential_component_start = calculate_velocity_components(closest_point_start, u_start, v_start, segment_start, segment_end)
            tangential_component_end = calculate_velocity_components(closest_point_end, u_end, v_end, segment_start, segment_end)

            tangential_components.append(tangential_component_start)
            tangential_components.append(tangential_component_end)
            cell_positions.append(closest_point_start)
            cell_positions.append(closest_point_end)

            delta_v = tangential_component_end - tangential_component_start
            delta_x = np.linalg.norm(np.array(closest_point_end) - np.array(closest_point_start))
            segment_gradient = (delta_v / delta_x)*1000

            segment_gradients.append(segment_gradient)
            segment_numbers.append(i+1)

    return segment_gradients


list_of_segment_gradients = []

for i, case in enumerate(cases):

    list_of_final_segments = []
    segment_gradients_list = []

    for image_nr in progressbar.progressbar(image_nrs): 

        final_segments = local_flame_speed_from_single_image_double_frame(image_nr, n_nearest_coords, threshold_angle)
        segment_gradients = calculate_segment_gradients(image_nr, n_nearest_coords, threshold_angle)

        list_of_final_segments.append(final_segments)
        segment_gradients_list.extend(segment_gradients)

    list_of_segment_gradients.append(segment_gradients_list)

